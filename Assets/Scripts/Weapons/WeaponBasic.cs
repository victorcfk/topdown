using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public abstract class WeaponBasic : MonoBehaviour
{
    /*Commenting guidelines, left here for posterity
    /// <summary>
    /// Rotates the vehicle with the specified amount.
    /// </summary>
    /// <param name="Degrees">The amount, in degrees, to rotate the vehicle.</param>
    /// <returns>A Boolean value indicating a successful check.</returns>
    */
    public GameObject projectilePrefab;                       //The projectile the weapon should fire
//    public string projectileName;

    public Quaternion fireAngle = Quaternion.LookRotation(Vector3.forward);
    public Vector3 fireDirection;
    //public GameObject target;                           //Any possible Homing/Final Targets

    public bool isOverrideProjectileSpeed = false;      //Should we use our own speed to apply to the projectile
    public float projectileSpeedOverrideValue = 10;                   //Speed to use when overrriding the projectile's speed    

    //public bool isFiring = false;                       //Is the weapon currently firing?
    
    protected float projectileSpeed = 5;                   //Speed to use when overrriding the projectile's speed
    protected float coolDownTimer;
    public float coolDownBetweenShots = 4;              //CoolDown between shots

    [HideInInspector]
    public List<GameObject> ExistingProjectiles;        //Indicates the list of projectiles already generated by the weapon. Used for cleanup and the like
    
   // Use this for initialization
    void Start()
    {
        //this.InvokeRepeating("LaunchProjectile", 1, 1);

        if (isOverrideProjectileSpeed)
        {
            projectileSpeed = projectileSpeedOverrideValue;
        }
        else
        {
            projectileSpeed = projectilePrefab.GetComponent<ProjectileBasic>().MinSpeed;
        }
    }

    // Update is called once per frame
    void Update()
    {
        //LaunchProjectile();
        if(coolDownTimer > 0)
            coolDownTimer -= Time.fixedDeltaTime;
                
    }

    /// <summary>
    /// Creates a projectile with properties to be initialised later
    /// </summary>
    /// <returns>The instance of the Projectile.</returns>
    virtual protected GameObject CreateProjectile(Vector3 spawnLocation, Quaternion initialFacing)
    {
        //print(col.radius * 3);
        return (GameObject)Instantiate(
            projectilePrefab,
            spawnLocation,
            initialFacing);
    }


    virtual public void FireWeapon()
    {
        if (coolDownTimer <= 0)
        {
            LaunchProjectile();

            coolDownTimer = coolDownBetweenShots;
        }
        else
            return;
    }

    /// <summary>
    /// Create and Fire off the projectile, assuming it is created at the 
    /// Weapon's position and shares the same forward as the weapon
    /// </summary>
    virtual protected void LaunchProjectile()
    {
        fireAngle = transform.rotation;
        fireDirection = transform.forward;      
        
        GameObject instance = CreateProjectile(gameObject.transform.position, fireAngle);

        instance.rigidbody.velocity = (fireDirection).normalized * projectileSpeed;
    }
    
    public void clearUpProjectile(GameObject projectile)
    {

        //print("Clean: " + proj.transform.position);
        ExistingProjectiles.Remove(projectile);
        //ExistingProjectiles.IndexOf(proj);
    }
}